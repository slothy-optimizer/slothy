.syntax unified
.cpu cortex-m4
.thumb

// q locate in the top half of the register
.macro plant_red q, qa, qinv, tmp
 mul \tmp, \tmp, \qinv
 // tmp*qinv mod 2^2n/ 2^n; in high half
 smlatt \tmp, \tmp, \q, \qa
 // result in high half
.endm

.macro doublebasemul_frombytes_asm_acc_32_16 rptr_tmp, rptr, bptr, zeta, poly0, poly1, poly3, res0, tmp, q, qa, qinv
  ldr \poly0, [\bptr], #8
  ldr \res0, [\rptr_tmp], #16 // @slothy:core // @slothy:before=cmp

  smulwt \tmp, \zeta, \poly1
 smlabt \tmp, \tmp, \q, \qa
 smlatt \tmp, \poly0, \tmp, \res0
 smlabb \tmp, \poly0, \poly1, \tmp
  plant_red \q, \qa, \qinv, \tmp

  ldr \res0, [\rptr_tmp, #-12]
  smladx \res0, \poly0, \poly1, \res0
  plant_red \q, \qa, \qinv, \res0

  pkhtb \res0, \res0, \tmp, asr #16
  str \res0, [\rptr], #8

  neg \zeta, \zeta

  ldr \poly0, [\bptr, #-4]
  ldr \res0, [\rptr_tmp, #-8]

  smulwt \tmp, \zeta, \poly3
 smlabt \tmp, \tmp, \q, \qa
 smlatt \tmp, \poly0, \tmp, \res0
 smlabb \tmp, \poly0, \poly3, \tmp
  plant_red \q, \qa, \qinv, \tmp

  ldr \res0, [\rptr_tmp, #-4]
  smladx \res0, \poly0, \poly3, \res0
  plant_red \q, \qa, \qinv, \res0

  pkhtb \res0, \res0, \tmp, asr #16
  str \res0, [\rptr, #-4]
.endm

// reduce 2 registers
.macro deserialize aptr, tmp, tmp2, tmp3, t0, t1
 ldrb.w \tmp, [\aptr, #2]
 ldrh.w \tmp2, [\aptr, #3]
 ldrb.w \tmp3, [\aptr, #5]
 ldrh.w \t0, [\aptr], #6

 ubfx \t1, \t0, #12, #4
 ubfx \t0, \t0, #0, #12
 orr \t1, \t1, \tmp, lsl #4
 orr \t0, \t0, \t1, lsl #16
 // tmp is free now
 ubfx \t1, \tmp2, #12, #4
 ubfx \tmp, \tmp2, #0, #12
 orr \t1, \t1, \tmp3, lsl #4
 orr \t1, \tmp, \t1, lsl #16
.endm

// void frombytes_mul_asm_acc_32_16(int16_t *r, const int16_t *b, const unsigned char *c, const int32_t zetas[64], const int32_t *r_tmp)
.global frombytes_mul_asm_acc_32_16_opt_m7
.type frombytes_mul_asm_acc_32_16_opt_m7, %function
.align 2
frombytes_mul_asm_acc_32_16_opt_m7:
  push {r4-r11, r14}

  rptr     .req r0
  bptr     .req r3
  aptr     .req r2
  zetaptr  .req r3
  t0       .req r4
 t1       .req r5
 tmp      .req r6
 tmp2     .req r7
 tmp3     .req r8
 q        .req r9
 qa       .req r10
 qinv     .req r11
 zeta     .req r12
 ctr      .req r14
  rptr_tmp .req r1

  movw qa, #26632
 movt  q, #3329
 ### qinv=0x6ba8f301
 movw qinv, #62209
 movt qinv, #27560

  vmov s1, r1
  ldr.w rptr_tmp, [sp, #9*4] // load rptr_tmp from stack

  add ctr, rptr_tmp, #64*4*4
                                    // Instructions:    5
                                    // Expected cycles: 5
                                    // Expected IPC:    1.00
                                    //
                                    // Cycle bound:     5.0
                                    // IPC bound:       1.00
                                    //
                                    // Wall time:     0.01s
                                    // User time:     0.01s
                                    //
                                    // ----- cycle (expected) ------>
                                    // 0                        25
                                    // |------------------------|----
        ldrb.w r8, [r2, #5]         // *.............................
        ldrh.w r7, [r2, #3]         // *.............................
        ldrb.w r12, [r2, #2]        // .*............................
        ldrh.w r5, [r2], #6         // .*............................
        ubfx r4, r5, #12, #4        // ....*.........................

                                     // ------ cycle (expected) ------>
                                     // 0                        25
                                     // |------------------------|-----
        // ldrb.w r8, [r2, #5]       // *..............................
        // ldrh.w r7, [r2, #3]       // *..............................
        // ldrb.w r12, [r2, #2]      // .*.............................
        // ldrh.w r5, [r2], #6       // .*.............................
        // ubfx r4, r5, #12, #4      // ....*..........................

        sub r14, r14, #16
1:
                                         // Instructions:    48
                                         // Expected cycles: 26
                                         // Expected IPC:    1.85
                                         //
                                         // Cycle bound:     29.0
                                         // IPC bound:       1.66
                                         //
                                         // Wall time:     11.37s
                                         // User time:     11.37s
                                         //
                                         // ----- cycle (expected) ------>
                                         // 0                        25
                                         // |------------------------|----
        orr r6, r4, r12, lsl #4          // *.............................
        ldr.w r4, [r3], #4               // *.............................
        ubfx r5, r5, #0, #12             // .*............................
        vmov r12, s1                     // .*............................
        vmov s27, r3                     // ..*...........................
        orr r5, r5, r6, lsl #16          // ..*...........................
        ubfx r3, r7, #12, #4             // ...*..........................
        smulwt r6, r4, r5                // ...*..........................
        neg r4, r4                       // ....*.........................
        orr r8, r3, r8, lsl #4           // ....*.........................
        ubfx r7, r7, #0, #12             // .....*........................
        smlabt r6, r6, r9, r10           // .....*........................
        orr r8, r7, r8, lsl #16          // ......*.......................
        ldr r3, [r12], #8                // ......*.......................
        ldr r7, [r1], #16                // .......*...................... // @slothy:core // @slothy:before=cmp
        smulwt r4, r4, r8                // .......*......................
        smlatt r6, r3, r6, r7            // ........*.....................
        ldr r7, [r1, #-12]               // .........*....................
        smlabt r4, r4, r9, r10           // .........*....................
        vmov s1, r12                     // ..........*................... // @slothy:core
        smlabb r6, r3, r5, r6            // ..........*...................
        cmp.w r1, r14                    // ...........*.................. // @slothy:id=cmp
        smladx r7, r3, r5, r7            // ...........*..................
        ldr r5, [r12, #-4]               // ............*.................
        mul r6, r6, r11                  // ............*.................
        ldr r3, [r1, #-8]                // .............*................
        mul r7, r7, r11                  // .............*................
        ldr r12, [r1, #-4]               // ..............*...............
        smlatt r4, r5, r4, r3            // ..............*...............
        smlabb r4, r5, r8, r4            // ...............*..............
        smladx r12, r5, r8, r12          // ................*.............
        ldrb.w r8, [r2, #5]              // .................e............
        smlatt r6, r6, r9, r10           // .................*............
        smlatt r3, r7, r9, r10           // ..................*...........
        ldrh.w r7, [r2, #3]              // ...................e..........
        mul r4, r4, r11                  // ...................*..........
        pkhtb r3, r3, r6, asr #16        // ....................*.........
        mul r6, r12, r11                 // ....................*.........
        ldrb.w r12, [r2, #2]             // .....................e........
        smlatt r4, r4, r9, r10           // .....................*........
        ldrh.w r5, [r2], #6              // ......................e.......
        smlatt r6, r6, r9, r10           // ......................*.......
        str r3, [r0], #8                 // .......................*......
        vmov r3, s27                     // .......................*......
        pkhtb r4, r6, r4, asr #16        // ........................*.....
        str r4, [r0, #-4]                // ........................*.....
        ubfx r4, r5, #12, #4             // .........................e....
        bne.w 1b                         // .........................*.... // @slothy:branch

                                          // -------- cycle (expected) -------->
                                          // 0                        25
                                          // |------------------------|---------
        // ldr.w r12, [r3], #4            // .........*.........................
        // ldrb.w r6, [r2, #2]            // ....e....'....................~....
        // ldrh.w r7, [r2, #3]            // ..e......'..................~......
        // ldrb.w r8, [r2, #5]            // e........'................~........
        // ldrh.w r4, [r2], #6            // .....e...'.....................~...
        // ubfx r5, r4, #12, #4           // ........e'.........................
        // ubfx r4, r4, #0, #12           // .........'*........................
        // orr r5, r5, r6, lsl #4         // .........*.........................
        // orr r4, r4, r5, lsl #16        // .........'.*.......................
        // ubfx r5, r7, #12, #4           // .........'..*......................
        // ubfx r6, r7, #0, #12           // .........'....*....................
        // orr r5, r5, r8, lsl #4         // .........'...*.....................
        // orr r5, r6, r5, lsl #16        // .........'.....*...................
        // vmov s2, r3                    // .........'.*.......................
        // vmov r3, s1                    // .........'*........................
        // ldr r8, [r3], #8               // .........'.....*...................
        // ldr r6, [r1], #16              // .........'......*..................
        // smulwt r7, r12, r4             // .........'..*......................
        // smlabt r7, r7, r9, r10         // .........'....*....................
        // smlatt r7, r8, r7, r6          // .........'.......*.................
        // smlabb r7, r8, r4, r7          // .........'.........*...............
        // mul r7, r7, r11                // .........'...........*.............
        // smlatt r7, r7, r9, r10         // ~........'................*........
        // ldr r6, [r1, #-12]             // .........'........*................
        // smladx r6, r8, r4, r6          // .........'..........*..............
        // mul r6, r6, r11                // .........'............*............
        // smlatt r6, r6, r9, r10         // .~.......'.................*.......
        // pkhtb r6, r6, r7, asr #16      // ...~.....'...................*.....
        // str r6, [r0], #8               // ......~..'......................*..
        // neg r12, r12                   // .........'...*.....................
        // ldr r8, [r3, #-4]              // .........'...........*.............
        // ldr r6, [r1, #-8]              // .........'............*............
        // smulwt r7, r12, r5             // .........'......*..................
        // smlabt r7, r7, r9, r10         // .........'........*................
        // smlatt r7, r8, r7, r6          // .........'.............*...........
        // smlabb r7, r8, r5, r7          // .........'..............*..........
        // mul r7, r7, r11                // ..~......'..................*......
        // smlatt r7, r7, r9, r10         // ....~....'....................*....
        // ldr r6, [r1, #-4]              // .........'.............*...........
        // smladx r6, r8, r5, r6          // .........'...............*.........
        // mul r6, r6, r11                // ...~.....'...................*.....
        // smlatt r6, r6, r9, r10         // .....~...'.....................*...
        // pkhtb r6, r6, r7, asr #16      // .......~.'.......................*.
        // str r6, [r0, #-4]              // .......~.'.......................*.
        // vmov s1, r3                    // .........'.........*...............
        // cmp.w r1, r14                  // .........'..........*..............
        // vmov r3, s2                    // ......~..'......................*..
        // bne.w 1b                       // ........~'........................*


                                          // Instructions:    43
                                          // Expected cycles: 26
                                          // Expected IPC:    1.65
                                          //
                                          // Cycle bound:     26.0
                                          // IPC bound:       1.65
                                          //
                                          // Wall time:     1.77s
                                          // User time:     1.77s
                                          //
                                          // ----- cycle (expected) ------>
                                          // 0                        25
                                          // |------------------------|----
        orr r12, r4, r12, lsl #4          // *.............................
        ldr.w r4, [r3], #4                // *.............................
        ubfx r5, r5, #0, #12              // .*............................
        vmov r6, s1                       // .*............................
        orr r12, r5, r12, lsl #16         // ..*...........................
        vmov s27, r3                      // ..*...........................
        ubfx r5, r7, #12, #4              // ...*..........................
        smulwt r3, r4, r12                // ...*..........................
        orr r8, r5, r8, lsl #4            // ....*.........................
        ldr r5, [r6], #8                  // ....*.........................
        ubfx r7, r7, #0, #12              // .....*........................
        smlabt r3, r3, r9, r10            // .....*........................
        orr r7, r7, r8, lsl #16           // ......*.......................
        ldr r8, [r1], #16                 // ......*....................... // @slothy:core // @slothy:before=cmp
        neg r4, r4                        // .......*......................
        smlatt r8, r5, r3, r8             // .......*......................
        ldr r3, [r1, #-12]                // ........*.....................
        smlabb r8, r5, r12, r8            // ........*.....................
        cmp.w r1, r14                     // .........*.................... // @slothy:id=cmp
        smulwt r4, r4, r7                 // .........*....................
        vmov s1, r6                       // ..........*................... // @slothy:core
        smladx r5, r5, r12, r3            // ..........*...................
        ldr r12, [r6, #-4]                // ...........*..................
        smlabt r6, r4, r9, r10            // ...........*..................
        ldr r3, [r1, #-8]                 // ............*.................
        mul r8, r8, r11                   // ............*.................
        ldr r4, [r1, #-4]                 // .............*................
        smlatt r6, r12, r6, r3            // .............*................
        vmov r3, s27                      // ..............*...............
        smlabb r6, r12, r7, r6            // ..............*...............
        smladx r7, r12, r7, r4            // ...............*..............
        mul r12, r6, r11                  // ................*.............
        mul r6, r7, r11                   // .................*............
        smlatt r12, r12, r9, r10          // ..................*...........
        smlatt r7, r6, r9, r10            // ...................*..........
        mul r4, r5, r11                   // ....................*.........
        pkhtb r5, r7, r12, asr #16        // .....................*........
        smlatt r8, r8, r9, r10            // .....................*........
        smlatt r4, r4, r9, r10            // ......................*.......
        pkhtb r6, r4, r8, asr #16         // ........................*.....
        str r6, [r0], #8                  // ........................*.....
        str r5, [r0, #-4]                 // .........................*....

                                          // ------ cycle (expected) ------>
                                          // 0                        25
                                          // |------------------------|-----
        // orr r6, r4, r12, lsl #4        // *..............................
        // ldr.w r4, [r3], #4             // *..............................
        // ubfx r5, r5, #0, #12           // .*.............................
        // vmov r12, s1                   // .*.............................
        // vmov s27, r3                   // ..*............................
        // orr r5, r5, r6, lsl #16        // ..*............................
        // ubfx r3, r7, #12, #4           // ...*...........................
        // smulwt r6, r4, r5              // ...*...........................
        // neg r4, r4                     // .......*.......................
        // orr r8, r3, r8, lsl #4         // ....*..........................
        // ubfx r7, r7, #0, #12           // .....*.........................
        // smlabt r6, r6, r9, r10         // .....*.........................
        // orr r8, r7, r8, lsl #16        // ......*........................
        // ldr r3, [r12], #8              // ....*..........................
        // ldr r7, [r1], #16              // ......*........................
        // smulwt r4, r4, r8              // .........*.....................
        // smlatt r6, r3, r6, r7          // .......*.......................
        // ldr r7, [r1, #-12]             // ........*......................
        // smlabt r4, r4, r9, r10         // ...........*...................
        // vmov s1, r12                   // ..........*....................
        // smlabb r6, r3, r5, r6          // ........*......................
        // cmp.w r1, r14                  // .........*.....................
        // smladx r7, r3, r5, r7          // ..........*....................
        // ldr r5, [r12, #-4]             // ...........*...................
        // mul r6, r6, r11                // ............*..................
        // ldr r3, [r1, #-8]              // ............*..................
        // mul r7, r7, r11                // ....................*..........
        // ldr r12, [r1, #-4]             // .............*.................
        // smlatt r4, r5, r4, r3          // .............*.................
        // smlabb r4, r5, r8, r4          // ..............*................
        // smladx r12, r5, r8, r12        // ...............*...............
        // smlatt r6, r6, r9, r10         // .....................*.........
        // smlatt r3, r7, r9, r10         // ......................*........
        // mul r4, r4, r11                // ................*..............
        // pkhtb r3, r3, r6, asr #16      // ........................*......
        // mul r6, r12, r11               // .................*.............
        // smlatt r4, r4, r9, r10         // ..................*............
        // smlatt r6, r6, r9, r10         // ...................*...........
        // str r3, [r0], #8               // ........................*......
        // vmov r3, s27                   // ..............*................
        // pkhtb r4, r6, r4, asr #16      // .....................*.........
        // str r4, [r0, #-4]              // .........................*.....
        // bne.w 1b                       // .........................*.....


pop {r4-r11, pc}
.size frombytes_mul_asm_acc_32_16_opt_m7, .-frombytes_mul_asm_acc_32_16_opt_m7