.syntax unified
.cpu cortex-m4
.thumb

// q locate in the top half of the register
.macro plant_red q, qa, qinv, tmp
 mul \tmp, \tmp, \qinv
 // tmp*qinv mod 2^2n/ 2^n; in high half
 smlatt \tmp, \tmp, \q, \qa
 // result in high half
.endm

// -0.5p~0.5p
.global basemul_asm_acc_opt_m7
.type basemul_asm_acc_opt_m7, %function
.align 2
basemul_asm_acc_opt_m7:
 push {r4-r11, lr}

 rptr    .req r0
 aptr    .req r1
 bptr    .req r2
 zetaptr .req r3
 poly0   .req r4
 poly1   .req r6
 poly2   .req r5
 poly3   .req r7
 q       .req r8
 qa      .req r14
 qinv    .req r9
 tmp     .req r10
 tmp2    .req r11
 zeta    .req r12
 loop    .req r14


 movt  q, #3329
 ### qinv=0x6ba8f301
 movw qinv, #62209
 movt qinv, #27560

 movw loop, #64
                                   // Instructions:    5
                                   // Expected cycles: 5
                                   // Expected IPC:    1.00
                                   //
                                   // Cycle bound:     5.0
                                   // IPC bound:       1.00
                                   //
                                   // Wall time:     0.00s
                                   // User time:     0.00s
                                   //
                                   // ----- cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|----
        ldr.w r10, [r3], #4        // *.............................
        ldr r7, [r2, #4]           // .*............................
        ldr r5, [r2], #8           // .*............................
        smulwt r11, r10, r5        // ...*..........................
        neg r10, r10               // ....*.........................

                                    // ------ cycle (expected) ------>
                                    // 0                        25
                                    // |------------------------|-----
        // ldr r7, [r2, #4]         // .*.............................
        // ldr r5, [r2], #8         // .*.............................
        // ldr.w r10, [r3], #4      // *..............................
        // smulwt r11, r10, r5      // ...*...........................
        // neg r10, r10             // ....*..........................

        sub r14, r14, #1
1:
                                          // Instructions:    35
                                          // Expected cycles: 21
                                          // Expected IPC:    1.67
                                          //
                                          // Cycle bound:     23.0
                                          // IPC bound:       1.52
                                          //
                                          // Wall time:     1.04s
                                          // User time:     1.04s
                                          //
                                          // ----- cycle (expected) ------>
                                          // 0                        25
                                          // |------------------------|----
        movw r12, #26632                  // *............................. // @slothy:core
        smulwt r4, r10, r7                // *.............................
        ldr r10, [r1, #4]                 // .*............................
        smlabt r11, r11, r8, r12          // .*............................
        vmov s0, r14                      // ..*........................... // @slothy:core
        smlabt r14, r4, r8, r12           // ..*...........................
        ldr r6, [r1], #8                  // ...*..........................
        smuadx r4, r10, r7                // ...*..........................
        smultt r14, r10, r14              // ....*.........................
        smultt r11, r6, r11               // .....*........................
        smlabb r11, r6, r5, r11           // ......*.......................
        smuadx r6, r6, r5                 // .......*......................
        mul r5, r11, r9                   // ........*.....................
        ldr.w r11, [r0]                   // .........*....................
        smlabb r10, r10, r7, r14          // .........*....................
        mul r6, r6, r9                    // ..........*...................
        ldr r7, [r2, #4]                  // ...........e..................
        smlatt r14, r5, r8, r12           // ...........*..................
        ldr r5, [r2], #8                  // ............e.................
        smlatt r6, r6, r8, r12            // ............*.................
        mul r10, r10, r9                  // .............*................
        pkhtb r6, r6, r14, asr #16        // ..............*...............
        mul r14, r4, r9                   // ..............*...............
        uadd16 r11, r6, r11               // ...............*..............
        smlatt r6, r10, r8, r12           // ...............*..............
        ldr.w r10, [r3], #4               // ................e.............
        smlatt r4, r14, r8, r12           // ................*.............
        str.w r11, [r0], #4               // .................*............
        vmov r14, s0                      // .................*............ // @slothy:core
        ldr.w r12, [r0]                   // ..................*...........
        smulwt r11, r10, r5               // ..................e...........
        pkhtb r6, r4, r6, asr #16         // ...................*..........
        neg r10, r10                      // ...................e..........
        uadd16 r12, r6, r12               // ....................*.........
        str.w r12, [r0], #4               // ....................*.........

                                             // ------ cycle (expected) ------>
                                             // 0                        25
                                             // |------------------------|-----
        // vmov s0, r14                      // ..........'.*..................
        // movw r14, #26632                  // ..........*....................
        // ldr r5, [r1, #4]                  // ..........'*...................
        // ldr r4, [r1], #8                  // ..........'..*.................
        // ldr r7, [r2, #4]                  // e.........'..........~.........
        // ldr r6, [r2], #8                  // .e........'...........~........
        // ldr.w r12, [r3], #4               // .....e....'...............~....
        // smulwt r10, r12, r6               // .......e..'.................~..
        // smlabt r10, r10, r8, r14          // ..........'*...................
        // smultt r10, r4, r10               // ..........'....*...............
        // smlabb r10, r4, r6, r10           // ..........'.....*..............
        // mul r10, r10, r9                  // ..........'.......*............
        // smlatt r10, r10, r8, r14          // ~.........'..........*.........
        // smuadx r11, r4, r6                // ..........'......*.............
        // mul r11, r11, r9                  // ..........'.........*..........
        // smlatt r11, r11, r8, r14          // .~........'...........*........
        // pkhtb r10, r11, r10, asr #16      // ...~......'.............*......
        // ldr.w r11, [r0]                   // ..........'........*...........
        // uadd16 r10, r10, r11              // ....~.....'..............*.....
        // str.w r10, [r0], #4               // ......~...'................*...
        // neg r12, r12                      // ........e.'..................~.
        // smulwt r10, r12, r7               // ..........*....................
        // smlabt r10, r10, r8, r14          // ..........'.*..................
        // smultt r10, r5, r10               // ..........'...*................
        // smlabb r10, r5, r7, r10           // ..........'........*...........
        // mul r10, r10, r9                  // ..~.......'............*.......
        // smlatt r10, r10, r8, r14          // ....~.....'..............*.....
        // smuadx r11, r5, r7                // ..........'..*.................
        // mul r11, r11, r9                  // ...~......'.............*......
        // smlatt r11, r11, r8, r14          // .....~....'...............*....
        // pkhtb r10, r11, r10, asr #16      // ........~.'..................*.
        // ldr.w r11, [r0]                   // .......~..'.................*..
        // uadd16 r10, r10, r11              // .........~'...................*
        // str.w r10, [r0], #4               // .........~'...................*
        // vmov r14, s0                      // ......~...'................*...

        subs r14, r14, #1
        bne 1b
                                           // Instructions:    30
                                           // Expected cycles: 21
                                           // Expected IPC:    1.43
                                           //
                                           // Cycle bound:     21.0
                                           // IPC bound:       1.43
                                           //
                                           // Wall time:     0.06s
                                           // User time:     0.06s
                                           //
                                           // ----- cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|----
        movw r12, #26632                   // *............................. // @slothy:core
        smulwt r6, r10, r7                 // *.............................
        ldr r4, [r1, #4]                   // .*............................
        smlabt r11, r11, r8, r12           // .*............................
        vmov s0, r14                       // ..*........................... // @slothy:core
        smlabt r6, r6, r8, r12             // ..*...........................
        ldr r14, [r1], #8                  // ...*..........................
        smuadx r10, r4, r7                 // ...*..........................
        smultt r6, r4, r6                  // ....*.........................
        smlabb r6, r4, r7, r6              // .....*........................
        ldr.w r4, [r0]                     // ......*.......................
        smultt r7, r14, r11                // ......*.......................
        smlabb r7, r14, r5, r7             // .......*......................
        smuadx r5, r14, r5                 // ........*.....................
        vmov r14, s0                       // .........*.................... // @slothy:core
        mul r7, r7, r9                     // .........*....................
        mul r5, r5, r9                     // ..........*...................
        smlatt r7, r7, r8, r12             // ...........*..................
        smlatt r5, r5, r8, r12             // ............*.................
        mul r11, r10, r9                   // .............*................
        pkhtb r7, r5, r7, asr #16          // ..............*...............
        mul r6, r6, r9                     // ..............*...............
        uadd16 r4, r7, r4                  // ...............*..............
        str.w r4, [r0], #4                 // ...............*..............
        ldr.w r4, [r0]                     // ................*.............
        smlatt r6, r6, r8, r12             // ................*.............
        smlatt r12, r11, r8, r12           // .................*............
        pkhtb r12, r12, r6, asr #16        // ...................*..........
        uadd16 r12, r12, r4                // ....................*.........
        str.w r12, [r0], #4                // ....................*.........

                                           // ------ cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|-----
        // movw r12, #26632                // *..............................
        // smulwt r4, r10, r7              // *..............................
        // ldr r10, [r1, #4]               // .*.............................
        // smlabt r11, r11, r8, r12        // .*.............................
        // vmov s0, r14                    // ..*............................
        // smlabt r14, r4, r8, r12         // ..*............................
        // ldr r6, [r1], #8                // ...*...........................
        // smuadx r4, r10, r7              // ...*...........................
        // smultt r14, r10, r14            // ....*..........................
        // smultt r11, r6, r11             // ......*........................
        // smlabb r11, r6, r5, r11         // .......*.......................
        // smuadx r6, r6, r5               // ........*......................
        // mul r5, r11, r9                 // .........*.....................
        // ldr.w r11, [r0]                 // ......*........................
        // smlabb r10, r10, r7, r14        // .....*.........................
        // mul r6, r6, r9                  // ..........*....................
        // smlatt r14, r5, r8, r12         // ...........*...................
        // smlatt r6, r6, r8, r12          // ............*..................
        // mul r10, r10, r9                // ..............*................
        // pkhtb r6, r6, r14, asr #16      // ..............*................
        // mul r14, r4, r9                 // .............*.................
        // uadd16 r11, r6, r11             // ...............*...............
        // smlatt r6, r10, r8, r12         // ................*..............
        // smlatt r4, r14, r8, r12         // .................*.............
        // str.w r11, [r0], #4             // ...............*...............
        // vmov r14, s0                    // .........*.....................
        // ldr.w r12, [r0]                 // ................*..............
        // pkhtb r6, r4, r6, asr #16       // ...................*...........
        // uadd16 r12, r6, r12             // ....................*..........
        // str.w r12, [r0], #4             // ....................*..........


 pop {r4-r11, pc}

.size basemul_asm_acc_opt_m7, .-basemul_asm_acc_opt_m7