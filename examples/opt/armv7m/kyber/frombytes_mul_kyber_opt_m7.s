.syntax unified
.cpu cortex-m4
.thumb

// q locate in the top half of the register
.macro plant_red q, qa, qinv, tmp
 mul \tmp, \tmp, \qinv
 // tmp*qinv mod 2^2n/ 2^n; in high half
 smlatt \tmp, \tmp, \q, \qa
 // result in high half
.endm

.macro doublebasemul_frombytes_asm rptr, bptr, zeta, poly0, poly1, poly3, tmp, tmp2, q, qa, qinv
 ldr.w \poly0, [\bptr], #8

 smulwt \tmp, \zeta, \poly1
 smlabt \tmp, \tmp, \q, \qa
 smultt \tmp, \poly0, \tmp
 smlabb \tmp, \poly0, \poly1, \tmp
 // a1*b1*zeta+a0*b0
 plant_red \q, \qa, \qinv, \tmp
 // r[0] in upper half of tmp

 smuadx \tmp2, \poly0, \poly1
 plant_red \q, \qa, \qinv, \tmp2

 // r[1] in upper half of tmp2
 pkhtb \tmp, \tmp2, \tmp, asr #16
 str \tmp, [rptr], #8  // @slothy:core

 neg \zeta, \zeta

 ldr \poly0, [\bptr, #-4]
 // basemul(r->coeffs + 4 * i + 2, a->coeffs + 4 * i + 2, b->coeffs + 4 * i + 2, - zetas[64 + i]);
 smulwt \tmp, \zeta, \poly3
 smlabt \tmp, \tmp, \q, \qa
 smultt \tmp, \poly0, \tmp
 smlabb \tmp, \poly0, \poly3, \tmp
 plant_red \q, \qa, \qinv, \tmp
 // r[0] in upper half of tmp

 smuadx \tmp2, \poly0, \poly3
 plant_red \q, \qa, \qinv, \tmp2
 // r[1] in upper half of tmp2
 pkhtb \tmp, \tmp2, \tmp, asr #16
 str \tmp, [rptr, #-4]
.endm

// reduce 2 registers
.macro deserialize aptr, tmp, tmp2, tmp3, t0, t1
 ldrb.w \tmp, [\aptr, #2]
 ldrh.w \tmp2, [\aptr, #3]
 ldrb.w \tmp3, [\aptr, #5]
 ldrh.w \t0, [\aptr], #6

 ubfx \t1, \t0, #12, #4
 ubfx \t0, \t0, #0, #12
 orr \t1, \t1, \tmp, lsl #4
 orr \t0, \t0, \t1, lsl #16
 // tmp is free now
 ubfx \t1, \tmp2, #12, #4
 ubfx \tmp, \tmp2, #0, #12
 orr \t1, \t1, \tmp3, lsl #4
 orr \t1, \tmp, \t1, lsl #16
.endm


// void frombytes_mul_asm(int16_t *r, const int16_t *b, const unsigned char *a, const int32_t zetas[64])
.global frombytes_mul_asm_opt_m7
.type frombytes_mul_asm_opt_m7, %function
.align 2
frombytes_mul_asm_opt_m7:
 push {r4-r11, r14}

 rptr    .req r0
 bptr    .req r1
 aptr    .req r2
 zetaptr .req r3
 t0      .req r4
 t1      .req r5
 tmp     .req r6
 tmp2    .req r7
 tmp3    .req r8
 q       .req r9
 qa      .req r10
 qinv    .req r11
 zeta    .req r12
 ctr     .req r14

 movw qa, #26632
 movt  q, #3329
 ### qinv=0x6ba8f301
 movw qinv, #62209
 movt qinv, #27560

 add ctr, rptr, #64*4*2
                                      // Instructions:    7
                                      // Expected cycles: 6
                                      // Expected IPC:    1.17
                                      //
                                      // Cycle bound:     6.0
                                      // IPC bound:       1.17
                                      //
                                      // Wall time:     0.01s
                                      // User time:     0.01s
                                      //
                                      // ----- cycle (expected) ------>
                                      // 0                        25
                                      // |------------------------|----
        ldrb.w r5, [r2, #5]           // *.............................
        ldrh.w r8, [r2, #3]           // *.............................
        ldrb.w r7, [r2, #2]           // .*............................
        ldrh.w r12, [r2], #6          // .*............................
        ubfx r4, r8, #12, #4          // ...*..........................
        orr r6, r4, r5, lsl #4        // ....*.........................
        ubfx r5, r12, #12, #4         // .....*........................

                                       // ------ cycle (expected) ------>
                                       // 0                        25
                                       // |------------------------|-----
        // ldrh.w r8, [r2, #3]         // *..............................
        // ldrb.w r5, [r2, #5]         // *..............................
        // ubfx r6, r8, #12, #4        // ...*...........................
        // orr r6, r6, r5, lsl #4      // ....*..........................
        // ldrb.w r7, [r2, #2]         // .*.............................
        // ldrh.w r12, [r2], #6        // .*.............................
        // ubfx r5, r12, #12, #4       // .....*.........................

        sub r14, r14, #8
1:
                                           // Instructions:    40
                                           // Expected cycles: 25
                                           // Expected IPC:    1.60
                                           //
                                           // Cycle bound:     27.0
                                           // IPC bound:       1.48
                                           //
                                           // Wall time:     4.66s
                                           // User time:     4.66s
                                           //
                                           // ----- cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|----
        ldr.w r4, [r1], #8                 // *.............................
        orr r7, r5, r7, lsl #4             // *.............................
        ubfx r12, r12, #0, #12             // .*............................
        ldr.w r5, [r3], #4                 // .*............................
        orr r12, r12, r7, lsl #16          // ..*...........................
        ubfx r7, r8, #0, #12               // ...*..........................
        smulwt r8, r5, r12                 // ...*..........................
        orr r7, r7, r6, lsl #16            // ....*.........................
        smuadx r6, r4, r12                 // ....*.........................
        neg r5, r5                         // .....*........................
        smlabt r8, r8, r9, r10             // .....*........................
        mul r6, r6, r11                    // ......*.......................
        smultt r8, r4, r8                  // .......*......................
        smlabb r8, r4, r12, r8             // ........*.....................
        ldr r4, [r1, #-4]                  // .........*....................
        smulwt r12, r5, r7                 // .........*....................
        mul r8, r8, r11                    // ..........*...................
        smlabt r5, r12, r9, r10            // ...........*..................
        smlatt r12, r8, r9, r10            // ............*.................
        ldrh.w r8, [r2, #3]                // .............e................
        smlatt r6, r6, r9, r10             // .............*................
        smultt r5, r4, r5                  // ..............*...............
        pkhtb r12, r6, r12, asr #16        // ...............*..............
        smlabb r6, r4, r7, r5              // ...............*..............
        ldrb.w r5, [r2, #5]                // ................e.............
        smuadx r4, r4, r7                  // ................*.............
        mul r7, r6, r11                    // .................*............
        ubfx r6, r8, #12, #4               // ..................e...........
        mul r4, r4, r11                    // ..................*...........
        orr r6, r6, r5, lsl #4             // ...................e..........
        smlatt r5, r7, r9, r10             // ...................*..........
        ldrb.w r7, [r2, #2]                // ....................e.........
        smlatt r4, r4, r9, r10             // ....................*.........
        str r12, [r0], #8                  // .....................*........ // @slothy:core
        ldrh.w r12, [r2], #6               // .....................e........
        pkhtb r5, r4, r5, asr #16          // ......................*.......
        cmp.w r0, r14                      // ......................*.......
        str r5, [r0, #-4]                  // .......................*......
        ubfx r5, r12, #12, #4              // ........................e.....
        bne.w 1b                           // ........................*..... // @slothy:branch

                                          // --------- cycle (expected) --------->
                                          // 0                        25
                                          // |------------------------|-----------
        // ldr.w r12, [r3], #4            // ............'*.......................
        // ldrb.w r6, [r2, #2]            // .......e....'...................~....
        // ldrh.w r7, [r2, #3]            // e...........'............~...........
        // ldrb.w r8, [r2, #5]            // ...e........'...............~........
        // ldrh.w r4, [r2], #6            // ........e...'....................~...
        // ubfx r5, r4, #12, #4           // ...........e'........................
        // ubfx r4, r4, #0, #12           // ............'*.......................
        // orr r5, r5, r6, lsl #4         // ............*........................
        // orr r4, r4, r5, lsl #16        // ............'.*......................
        // ubfx r5, r7, #12, #4           // .....e......'.................~......
        // ubfx r6, r7, #0, #12           // ............'..*.....................
        // orr r5, r5, r8, lsl #4         // ......e.....'..................~.....
        // orr r5, r6, r5, lsl #16        // ............'...*....................
        // ldr.w r8, [r1], #8             // ............*........................
        // smulwt r6, r12, r4             // ............'..*.....................
        // smlabt r6, r6, r9, r10         // ............'....*...................
        // smultt r6, r8, r6              // ............'......*.................
        // smlabb r6, r8, r4, r6          // ............'.......*................
        // mul r6, r6, r11                // ............'.........*..............
        // smlatt r6, r6, r9, r10         // ............'...........*............
        // smuadx r7, r8, r4              // ............'...*....................
        // mul r7, r7, r11                // ............'.....*..................
        // smlatt r7, r7, r9, r10         // ~...........'............*...........
        // pkhtb r6, r7, r6, asr #16      // ..~.........'..............*.........
        // str r6, [r0], #8               // ........~...'....................*...
        // neg r12, r12                   // ............'....*...................
        // ldr r8, [r1, #-4]              // ............'........*...............
        // smulwt r6, r12, r5             // ............'........*...............
        // smlabt r6, r6, r9, r10         // ............'..........*.............
        // smultt r6, r8, r6              // .~..........'.............*..........
        // smlabb r6, r8, r5, r6          // ..~.........'..............*.........
        // mul r6, r6, r11                // ....~.......'................*.......
        // smlatt r6, r6, r9, r10         // ......~.....'..................*.....
        // smuadx r7, r8, r5              // ...~........'...............*........
        // mul r7, r7, r11                // .....~......'.................*......
        // smlatt r7, r7, r9, r10         // .......~....'...................*....
        // pkhtb r6, r7, r6, asr #16      // .........~..'.....................*..
        // str r6, [r0, #-4]              // ..........~.'......................*.
        // cmp.w r0, r14                  // .........~..'.....................*..
        // bne.w 1b                       // ...........~'.......................*


                                         // Instructions:    33
                                         // Expected cycles: 24
                                         // Expected IPC:    1.38
                                         //
                                         // Cycle bound:     24.0
                                         // IPC bound:       1.38
                                         //
                                         // Wall time:     0.38s
                                         // User time:     0.38s
                                         //
                                         // ----- cycle (expected) ------>
                                         // 0                        25
                                         // |------------------------|----
        ldr.w r4, [r1], #8               // *.............................
        orr r7, r5, r7, lsl #4           // *.............................
        ubfx r5, r12, #0, #12            // .*............................
        ldr.w r12, [r3], #4              // .*............................
        orr r5, r5, r7, lsl #16          // ..*...........................
        ubfx r7, r8, #0, #12             // ...*..........................
        smulwt r8, r12, r5               // ...*..........................
        orr r6, r7, r6, lsl #16          // ....*.........................
        smuadx r7, r4, r5                // ....*.........................
        neg r12, r12                     // .....*........................
        smlabt r8, r8, r9, r10           // .....*........................
        smulwt r12, r12, r6              // ......*.......................
        smultt r8, r4, r8                // .......*......................
        smlabb r4, r4, r5, r8            // ........*.....................
        ldr r5, [r1, #-4]                // .........*....................
        smlabt r8, r12, r9, r10          // .........*....................
        mul r7, r7, r11                  // ..........*...................
        smultt r12, r5, r8               // ...........*..................
        smlatt r8, r7, r9, r10           // ............*.................
        smlabb r12, r5, r6, r12          // .............*................
        mul r4, r4, r11                  // ..............*...............
        smuadx r6, r5, r6                // ...............*..............
        smlatt r5, r4, r9, r10           // ................*.............
        mul r4, r6, r11                  // .................*............
        mul r7, r12, r11                 // ..................*...........
        pkhtb r8, r8, r5, asr #16        // ...................*..........
        str r8, [r0], #8                 // ...................*.......... // @slothy:core
        cmp.w r0, r14                    // ....................*.........
        smlatt r5, r7, r9, r10           // ....................*.........
        smlatt r7, r4, r9, r10           // .....................*........
        pkhtb r8, r7, r5, asr #16        // .......................*......
        str r8, [r0, #-4]                // .......................*......

                                            // ------ cycle (expected) ------>
                                            // 0                        25
                                            // |------------------------|-----
        // ldr.w r4, [r1], #8               // *..............................
        // orr r7, r5, r7, lsl #4           // *..............................
        // ubfx r12, r12, #0, #12           // .*.............................
        // ldr.w r5, [r3], #4               // .*.............................
        // orr r12, r12, r7, lsl #16        // ..*............................
        // ubfx r7, r8, #0, #12             // ...*...........................
        // smulwt r8, r5, r12               // ...*...........................
        // orr r7, r7, r6, lsl #16          // ....*..........................
        // smuadx r6, r4, r12               // ....*..........................
        // neg r5, r5                       // .....*.........................
        // smlabt r8, r8, r9, r10           // .....*.........................
        // mul r6, r6, r11                  // ..........*....................
        // smultt r8, r4, r8                // .......*.......................
        // smlabb r8, r4, r12, r8           // ........*......................
        // ldr r4, [r1, #-4]                // .........*.....................
        // smulwt r12, r5, r7               // ......*........................
        // mul r8, r8, r11                  // ..............*................
        // smlabt r5, r12, r9, r10          // .........*.....................
        // smlatt r12, r8, r9, r10          // ................*..............
        // smlatt r6, r6, r9, r10           // ............*..................
        // smultt r5, r4, r5                // ...........*...................
        // pkhtb r12, r6, r12, asr #16      // ...................*...........
        // smlabb r6, r4, r7, r5            // .............*.................
        // smuadx r4, r4, r7                // ...............*...............
        // mul r7, r6, r11                  // ..................*............
        // mul r4, r4, r11                  // .................*.............
        // smlatt r5, r7, r9, r10           // ....................*..........
        // smlatt r4, r4, r9, r10           // .....................*.........
        // str r12, [r0], #8                // ...................*...........
        // pkhtb r5, r4, r5, asr #16        // .......................*.......
        // cmp.w r0, r14                    // ....................*..........
        // str r5, [r0, #-4]                // .......................*.......
        // bne.w 1b                         // ......................*........


 pop {r4-r11, pc}

.size frombytes_mul_asm_opt_m7, .-frombytes_mul_asm_opt_m7