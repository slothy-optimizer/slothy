.macro load_coeffs poly, len, wordLen
  lh s0,  \len*\wordLen*0(\poly)
  lh s1,  \len*\wordLen*1(\poly)
  lh s2,  \len*\wordLen*2(\poly)
  lh s3,  \len*\wordLen*3(\poly)
  lh s4,  \len*\wordLen*4(\poly)
  lh s5,  \len*\wordLen*5(\poly)
  lh s6,  \len*\wordLen*6(\poly)
  lh s7,  \len*\wordLen*7(\poly)
  lh s8,  \len*\wordLen*8(\poly)
  lh s9,  \len*\wordLen*9(\poly)
  lh s10, \len*\wordLen*10(\poly)
  lh s11, \len*\wordLen*11(\poly)
  lh a2,  \len*\wordLen*12(\poly)
  lh a3,  \len*\wordLen*13(\poly)
  lh a4,  \len*\wordLen*14(\poly)
  lh a5,  \len*\wordLen*15(\poly)
.endm

.macro store_coeffs poly, len, wordLen
  sh s0,  \len*\wordLen*0(\poly)
  sh s1,  \len*\wordLen*1(\poly)
  sh s2,  \len*\wordLen*2(\poly)
  sh s3,  \len*\wordLen*3(\poly)
  sh s4,  \len*\wordLen*4(\poly)
  sh s5,  \len*\wordLen*5(\poly)
  sh s6,  \len*\wordLen*6(\poly)
  sh s7,  \len*\wordLen*7(\poly)
  sh s8,  \len*\wordLen*8(\poly)
  sh s9,  \len*\wordLen*9(\poly)
  sh s10, \len*\wordLen*10(\poly)
  sh s11, \len*\wordLen*11(\poly)
  sh a2,  \len*\wordLen*12(\poly)
  sh a3,  \len*\wordLen*13(\poly)
  sh a4,  \len*\wordLen*14(\poly)
  sh a5,  \len*\wordLen*15(\poly)
.endm

.macro save_regs
  sd s0,  0*8(sp)
  sd s1,  1*8(sp)
  sd s2,  2*8(sp)
  sd s3,  3*8(sp)
  sd s4,  4*8(sp)
  sd s5,  5*8(sp)
  sd s6,  6*8(sp)
  sd s7,  7*8(sp)
  sd s8,  8*8(sp)
  sd s9,  9*8(sp)
  sd s10, 10*8(sp)
  sd s11, 11*8(sp)
  sd gp,  12*8(sp)
  sd tp,  13*8(sp)
  sd ra,  14*8(sp)
.endm

.macro restore_regs
  ld s0,  0*8(sp)
  ld s1,  1*8(sp)
  ld s2,  2*8(sp)
  ld s3,  3*8(sp)
  ld s4,  4*8(sp)
  ld s5,  5*8(sp)
  ld s6,  6*8(sp)
  ld s7,  7*8(sp)
  ld s8,  8*8(sp)
  ld s9,  9*8(sp)
  ld s10, 10*8(sp)
  ld s11, 11*8(sp)
  ld gp,  12*8(sp)
  ld tp,  13*8(sp)
  ld ra,  14*8(sp)
.endm

// a <- a*b*(-2^{-64}) mod+- q
// q32: q<<32; bqinv: b*qinv
.macro plant_mul_const_inplace q32, bqinv, a
  mul  \a, \a, \bqinv
  srai \a, \a, 32
  addi \a, \a, 8
  mulh \a, \a, \q32
.endm

// r <- a*b*(-2^{-64}) mod+- q
// q32: q<<32; bqinv: b*qinv
.macro plant_mul_const q32, bqinv, a, r
    mul  \r, \a, \bqinv
    srai \r, \r, 32
    addi \r, \r, 8
    mulh \r, \r, \q32
.endm

// each layer increases coefficients by 0.5q; In ct_butterfly, twiddle and tmp can be reused because each twiddle is only used once. The gs_butterfly cannot.
.macro ct_butterfly coeff0, coeff1, twiddle, q, tmp
  plant_mul_const \q, \twiddle, \coeff1, \tmp
  sub \coeff1, \coeff0, \tmp
  add \coeff0, \coeff0, \tmp
.endm

.macro gs_butterfly coeff0, coeff1, twiddle, q, tmp
  sub \tmp, \coeff0, \coeff1
  add \coeff0, \coeff0, \coeff1
  plant_mul_const \q, \twiddle, \tmp, \coeff1
.endm

// in-place plantard reduction to a
// output \in (-0.5q, 0.5q); q32: q<<32
.macro plant_red q32, qinv, a
  mul  \a, \a, \qinv
  srai \a, \a, 32
  addi \a, \a, 8
  mulh \a, \a, \q32
.endm

.equ q,    3329
.equ q32,  0xd0100000000                // q << 32
.equ qinv, 0x3c0f12886ba8f301           // q^-1 mod 2^64
.equ plantconst, 0x13afb7680bb055       // (((-2**64) % q) * qinv) % (2**64)
.equ plantconst2, 0x1a390f4d9791e139    // (((-2**64) % q) * ((-2**64) % q) * qinv) % (2**64)

// void poly_basemul_cache_init_rv64im(int32_t *r, const int16_t *a, const int16_t *b, int16_t *b_cache, uint64_t *zetas)
// compute basemul, cache bzeta into b_cache, and store the 32-bit results into r
// a0: r, a1: a, a2: b, a3: b_cache, a4: zetas
// a5: q<<32, a6: loop control
// t0-t3: a[2i,2i+1],b[2i,2i+1]
// t4: zeta, t5-t6: temp
.global poly_basemul_cache_init_rv64im_opt_c908
.align 2
poly_basemul_cache_init_rv64im_opt_c908:
    addi sp, sp, -8*15
    save_regs
    li a5, q32
    li a6, 64
                               // Instructions:    1
                               // Expected cycles: 1
                               // Expected IPC:    1.00
                               //
                               // Cycle bound:     1.0
                               // IPC bound:       1.00
                               //
                               // Wall time:     0.01s
                               // User time:     0.01s
                               //
                               // ----- cycle (expected) ------>
                               // 0                        25
                               // |------------------------|----
        ld x4, 8*0(x14)        // *.............................

                                // ------ cycle (expected) ------>
                                // 0                        25
                                // |------------------------|-----
        // ld x4, 8*0(x14)      // *..............................

        addi a6, a6, -1
poly_basemul_cache_init_rv64im_loop:
                                  // Instructions:    41
                                  // Expected cycles: 21
                                  // Expected IPC:    1.95
                                  //
                                  // Cycle bound:     22.0
                                  // IPC bound:       1.86
                                  //
                                  // Wall time:     13.88s
                                  // User time:     13.88s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        lh x29, 2*3(x12)          // *.............................
        neg x28, x4               // *.............................
        lh x25, 2*2(x11)          // .*............................
        addi x14, x14, 8*1        // .*............................
        lh x1, 2*1(x12)           // ..*...........................
        lh x5, 2*0(x12)           // ...*..........................
        mul x26, x29, x28         // ...*..........................
        mul x24, x25, x29         // ....*.........................
        lh x22, 2*1(x11)          // ....*.........................
        lh x6, 2*2(x12)           // .....*........................
        mul x30, x1, x4           // .....*........................
        lh x3, 2*3(x11)           // ......*.......................
        addi x12, x12, 2*4        // ......*.......................
        srai x9, x26, 32          // .......*......................
        lh x20, 2*0(x11)          // .......*......................
        addi x18, x9, 8           // ........*.....................
        addi x11, x11, 2*4        // ........*.....................
        mulh x26, x18, x15        // .........*....................
        srai x21, x30, 32         // .........*....................
        mul x7, x3, x6            // ..........*...................
        addi x17, x21, 8          // ..........*...................
        mul x8, x22, x5           // ...........*..................
        mulh x17, x17, x15        // ...........*..................
        mul x27, x25, x6          // ............*.................
        ld x4, 8*0(x14)           // ............e.................
        mul x23, x3, x26          // .............*................
        mul x31, x20, x1          // .............*................
        mul x19, x20, x5          // ..............*...............
        sh x26, 2*1(x13)          // ..............*...............
        sh x17, 2*0(x13)          // ...............*..............
        mul x22, x22, x17         // ...............*..............
        addi x13, x13, 2*2        // ................*.............
        add x21, x24, x7          // ................*.............
        add x23, x23, x27         // .................*............
        sw x21, 4*3(x10)          // .................*............
        add x21, x31, x8          // ..................*...........
        sw x23, 4*2(x10)          // ..................*...........
        add x30, x22, x19         // ...................*..........
        sw x21, 4*1(x10)          // ...................*..........
        sw x30, 4*0(x10)          // ....................*.........
        addi x10, x10, 4*4        // ....................*.........

                                    // ------ cycle (expected) ------>
                                    // 0                        25
                                    // |------------------------|-----
        // lh x7, 2*0(x12)          // .........'..*..................
        // lh x28, 2*1(x12)         // .........'.*...................
        // ld x29, 8*0(x14)         // e........'...........~.........
        // lh x5, 2*0(x11)          // .........'......*..............
        // lh x6, 2*1(x11)          // .........'...*.................
        // mul  x30, x28, x29       // .........'....*................
        // srai x30, x30, 32        // .........'........*............
        // addi x30, x30, 8         // .........'.........*...........
        // mulh x30, x30, x15       // .........'..........*..........
        // sh  x30, 2*0(x13)        // ...~.....'..............*......
        // mul x30, x6, x30         // ...~.....'..............*......
        // mul x31, x5, x7          // ..~......'.............*.......
        // add x30, x30, x31        // .......~.'..................*..
        // sw  x30, 4*0(x10)        // ........~'...................*.
        // mul x30, x5, x28         // .~.......'............*........
        // mul x31, x6, x7          // .........'..........*..........
        // add x30, x30, x31        // ......~..'.................*...
        // sw  x30, 4*1(x10)        // .......~.'..................*..
        // neg x29, x29             // .........*.....................
        // lh x7, 2*2(x12)          // .........'....*................
        // lh x28, 2*3(x12)         // .........*.....................
        // lh x5, 2*2(x11)          // .........'*....................
        // lh x6, 2*3(x11)          // .........'.....*...............
        // mul  x30, x28, x29       // .........'..*..................
        // srai x30, x30, 32        // .........'......*..............
        // addi x30, x30, 8         // .........'.......*.............
        // mulh x30, x30, x15       // .........'........*............
        // sh  x30, 2*1(x13)        // ..~......'.............*.......
        // mul x30, x6, x30         // .~.......'............*........
        // mul x31, x5, x7          // ~........'...........*.........
        // add x30, x30, x31        // .....~...'................*....
        // sw  x30, 4*2(x10)        // ......~..'.................*...
        // mul x30, x5, x28         // .........'...*.................
        // mul x31, x6, x7          // .........'.........*...........
        // add x30, x30, x31        // ....~....'...............*.....
        // sw  x30, 4*3(x10)        // .....~...'................*....
        // addi x10, x10, 4*4       // ........~'...................*.
        // addi x11, x11, 2*4       // .........'.......*.............
        // addi x12, x12, 2*4       // .........'.....*...............
        // addi x13, x13, 2*2       // ....~....'...............*.....
        // addi x14, x14, 8*1       // .........'*....................

        addi a6, a6, -1
        bne a6, zero, poly_basemul_cache_init_rv64im_loop
                                  // Instructions:    40
                                  // Expected cycles: 21
                                  // Expected IPC:    1.90
                                  //
                                  // Cycle bound:     21.0
                                  // IPC bound:       1.90
                                  //
                                  // Wall time:     0.77s
                                  // User time:     0.77s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        lh x23, 2*3(x12)          // *.............................
        neg x20, x4               // *.............................
        addi x14, x14, 8*1        // .*............................
        lh x7, 2*1(x12)           // .*............................
        lh x24, 2*2(x11)          // ..*...........................
        mul x8, x23, x20          // ...*..........................
        lh x26, 2*0(x11)          // ...*..........................
        mul x27, x7, x4           // ....*.........................
        lh x18, 2*3(x11)          // ....*.........................
        mul x20, x24, x23         // .....*........................
        lh x30, 2*0(x12)          // .....*........................
        lh x1, 2*1(x11)           // ......*.......................
        mul x28, x26, x7          // ......*.......................
        srai x23, x8, 32          // .......*......................
        lh x31, 2*2(x12)          // .......*......................
        srai x25, x27, 32         // ........*.....................
        addi x3, x23, 8           // ........*.....................
        mulh x17, x3, x15         // .........*....................
        addi x9, x25, 8           // .........*....................
        mul x19, x1, x30          // ..........*...................
        mulh x21, x9, x15         // ..........*...................
        mul x9, x18, x31          // ...........*..................
        addi x11, x11, 2*4        // ............*.................
        mul x27, x24, x31         // ............*.................
        mul x5, x26, x30          // .............*................
        mul x30, x18, x17         // .............*................
        mul x7, x1, x21           // ..............*...............
        sh x17, 2*1(x13)          // ..............*...............
        addi x12, x12, 2*4        // ...............*..............
        sh x21, 2*0(x13)          // ...............*..............
        add x29, x28, x19         // ................*.............
        add x9, x20, x9           // ................*.............
        sw x9, 4*3(x10)           // .................*............
        add x25, x30, x27         // .................*............
        sw x29, 4*1(x10)          // ..................*...........
        add x22, x7, x5           // ..................*...........
        sw x25, 4*2(x10)          // ...................*..........
        addi x13, x13, 2*2        // ...................*..........
        sw x22, 4*0(x10)          // ....................*.........
        addi x10, x10, 4*4        // ....................*.........

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // lh x29, 2*3(x12)        // *..............................
        // neg x28, x4             // *..............................
        // lh x25, 2*2(x11)        // ..*............................
        // addi x14, x14, 8*1      // .*.............................
        // lh x1, 2*1(x12)         // .*.............................
        // lh x5, 2*0(x12)         // .....*.........................
        // mul x26, x29, x28       // ...*...........................
        // mul x24, x25, x29       // .....*.........................
        // lh x22, 2*1(x11)        // ......*........................
        // lh x6, 2*2(x12)         // .......*.......................
        // mul x30, x1, x4         // ....*..........................
        // lh x3, 2*3(x11)         // ....*..........................
        // addi x12, x12, 2*4      // ...............*...............
        // srai x9, x26, 32        // .......*.......................
        // lh x20, 2*0(x11)        // ...*...........................
        // addi x18, x9, 8         // ........*......................
        // addi x11, x11, 2*4      // ............*..................
        // mulh x26, x18, x15      // .........*.....................
        // srai x21, x30, 32       // ........*......................
        // mul x7, x3, x6          // ...........*...................
        // addi x17, x21, 8        // .........*.....................
        // mul x8, x22, x5         // ..........*....................
        // mulh x17, x17, x15      // ..........*....................
        // mul x27, x25, x6        // ............*..................
        // mul x23, x3, x26        // .............*.................
        // mul x31, x20, x1        // ......*........................
        // mul x19, x20, x5        // .............*.................
        // sh x26, 2*1(x13)        // ..............*................
        // sh x17, 2*0(x13)        // ...............*...............
        // mul x22, x22, x17       // ..............*................
        // addi x13, x13, 2*2      // ...................*...........
        // add x21, x24, x7        // ................*..............
        // add x23, x23, x27       // .................*.............
        // sw x21, 4*3(x10)        // .................*.............
        // add x21, x31, x8        // ................*..............
        // sw x23, 4*2(x10)        // ...................*...........
        // add x30, x22, x19       // ..................*............
        // sw x21, 4*1(x10)        // ..................*............
        // sw x30, 4*0(x10)        // ....................*..........
        // addi x10, x10, 4*4      // ....................*..........

    restore_regs
    addi sp, sp, 8*15
ret