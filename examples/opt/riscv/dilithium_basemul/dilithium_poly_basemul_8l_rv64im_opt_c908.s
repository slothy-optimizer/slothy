.macro save_regs
  sd s0,  0*8(sp)
  sd s1,  1*8(sp)
  sd s2,  2*8(sp)
  sd s3,  3*8(sp)
  sd s4,  4*8(sp)
  sd s5,  5*8(sp)
  sd s6,  6*8(sp)
  sd s7,  7*8(sp)
  sd s8,  8*8(sp)
  sd s9,  9*8(sp)
  sd s10, 10*8(sp)
  sd s11, 11*8(sp)
  sd gp,  12*8(sp)
  sd tp,  13*8(sp)
  sd ra,  14*8(sp)
.endm

.macro restore_regs
  ld s0,  0*8(sp)
  ld s1,  1*8(sp)
  ld s2,  2*8(sp)
  ld s3,  3*8(sp)
  ld s4,  4*8(sp)
  ld s5,  5*8(sp)
  ld s6,  6*8(sp)
  ld s7,  7*8(sp)
  ld s8,  8*8(sp)
  ld s9,  9*8(sp)
  ld s10, 10*8(sp)
  ld s11, 11*8(sp)
  ld gp,  12*8(sp)
  ld tp,  13*8(sp)
  ld ra,  14*8(sp)
.endm

.macro plant_red_x4 q32, qinv, a_0, a_1, a_2, a_3
  mul  \a_0, \a_0, \qinv
  mul  \a_1, \a_1, \qinv
  mul  \a_2, \a_2, \qinv
  mul  \a_3, \a_3, \qinv
  srai \a_0, \a_0, 32
  srai \a_1, \a_1, 32
  srai \a_2, \a_2, 32
  srai \a_3, \a_3, 32
  addi \a_0, \a_0, 256
  addi \a_1, \a_1, 256
  addi \a_2, \a_2, 256
  addi \a_3, \a_3, 256
  mulh \a_0, \a_0, \q32
  mulh \a_1, \a_1, \q32
  mulh \a_2, \a_2, \q32
  mulh \a_3, \a_3, \q32
.endm

.equ q,    8380417
.equ q32,  0x7fe00100000000               // q << 32
.equ qinv, 0x180a406003802001             // q^-1 mod 2^64
.equ plantconst, 0x200801c0602            // (((-2**64) % q) * qinv) % (2**64)
.equ plantconst2, 0xb7b9f10ccf939804      // (((-2**64) % q) * ((-2**64) % q) * qinv) % (2**64)

# void poly_basemul_8l_rv64im(int32_t r[256], const int32_t a[256], const int32_t b[256])
.globl poly_basemul_8l_rv64im_opt_c908
.align 2
poly_basemul_8l_rv64im_opt_c908:
    addi sp, sp, -8*15
    save_regs
    li a4, q32
    li a5, qinv
    // loop control
    li gp, 64*4*4
    add gp, gp, a0
                                  // Instructions:    11
                                  // Expected cycles: 8
                                  // Expected IPC:    1.38
                                  //
                                  // Cycle bound:     8.0
                                  // IPC bound:       1.38
                                  //
                                  // Wall time:     0.06s
                                  // User time:     0.06s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        lw x21, 1*4(x11)          // *.............................
        lw x28, 1*4(x12)          // .*............................
        lw x29, 2*4(x11)          // ..*...........................
        mul x30, x21, x28         // ...*..........................
        lw x23, 2*4(x12)          // ...*..........................
        lw x1, 3*4(x11)           // ....*.........................
        mul x22, x29, x23         // .....*........................
        lw x7, 3*4(x12)           // .....*........................
        lw x4, 0*4(x12)           // ......*.......................
        addi x12, x12, 4*4        // ......*.......................
        mul x13, x1, x7           // .......*......................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // lw x25, 1*4(x11)        // *..............................
        // lw x19, 2*4(x11)        // ..*............................
        // lw x26, 3*4(x11)        // ....*..........................
        // lw x4, 0*4(x12)         // ......*........................
        // lw x31, 1*4(x12)        // .*.............................
        // lw x13, 3*4(x12)        // .....*.........................
        // lw x23, 2*4(x12)        // ...*...........................
        // mul x30, x25, x31       // ...*...........................
        // mul x22, x19, x23       // .....*.........................
        // addi x12, x12, 4*4      // ......*........................
        // mul x13, x26, x13       // .......*.......................

        addi gp, gp, -16
poly_basemul_8l_rv64im_looper:
                                  // Instructions:    34
                                  // Expected cycles: 17
                                  // Expected IPC:    2.00
                                  //
                                  // Cycle bound:     28.0
                                  // IPC bound:       1.21
                                  //
                                  // Wall time:     14.23s
                                  // User time:     14.23s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        lw x26, 0*4(x11)          // *.............................
        addi x11, x11, 4*4        // *.............................
        lw x25, 1*4(x11)          // .e............................
        mul x27, x30, x15         // .*............................
        lw x19, 2*4(x11)          // ..e...........................
        mul x18, x26, x4          // ..*...........................
        mul x8, x13, x15          // ...*..........................
        lw x26, 3*4(x11)          // ...e..........................
        lw x4, 0*4(x12)           // ....e.........................
        mul x1, x22, x15          // ....*.........................
        lw x31, 1*4(x12)          // .....e........................
        srai x28, x27, 32         // .....*........................
        mul x21, x18, x15         // ......*.......................
        addi x28, x28, 256        // ......*.......................
        srai x8, x8, 32           // .......*......................
        mulh x24, x28, x14        // .......*......................
        addi x22, x8, 256         // ........*.....................
        lw x13, 3*4(x12)          // ........e.....................
        srai x1, x1, 32           // .........*....................
        mulh x5, x22, x14         // .........*....................
        srai x21, x21, 32         // ..........*...................
        addi x16, x1, 256         // ..........*...................
        mulh x8, x16, x14         // ...........*..................
        addi x21, x21, 256        // ...........*..................
        mulh x21, x21, x14        // ............*.................
        lw x23, 2*4(x12)          // ............e.................
        sw x5, 3*4(x10)           // .............*................ // @slothy:core
        mul x30, x25, x31         // .............e................
        mul x22, x19, x23         // ..............e...............
        sw x24, 1*4(x10)          // ..............*............... // @slothy:core
        sw x8, 2*4(x10)           // ...............*.............. // @slothy:core
        addi x12, x12, 4*4        // ...............e..............
        sw x21, 0*4(x10)          // ................*............. // @slothy:core
        mul x13, x26, x13         // ................e.............

                                   // ------- cycle (expected) ------->
                                   // 0                        25
                                   // |------------------------|-------
        // lw x8, 0*4(x11)         // ................*................
        // lw x9, 1*4(x11)         // e...............'~...............
        // lw x18, 2*4(x11)        // .e..............'.~..............
        // lw x19, 3*4(x11)        // ..e.............'..~.............
        // lw x5, 0*4(x12)         // ...e............'...~............
        // lw x6, 1*4(x12)         // ....e...........'....~...........
        // lw x7, 2*4(x12)         // ...........e....'...........~....
        // lw x28, 3*4(x12)        // .......e........'.......~........
        // mul x20, x8, x5         // .~..............'.*..............
        // mul x22, x9, x6         // ............e...'............~...
        // mul x24, x18, x7        // .............e..'.............~..
        // mul x26, x19, x28       // ...............e'................
        // mul  x20, x20, x15      // .....~..........'.....*..........
        // mul  x22, x22, x15      // ~...............'*...............
        // mul  x24, x24, x15      // ...~............'...*............
        // mul  x26, x26, x15      // ..~.............'..*.............
        // srai x20, x20, 32       // .........~......'.........*......
        // srai x22, x22, 32       // ....~...........'....*...........
        // srai x24, x24, 32       // ........~.......'........*.......
        // srai x26, x26, 32       // ......~.........'......*.........
        // addi x20, x20, 256      // ..........~.....'..........*.....
        // addi x22, x22, 256      // .....~..........'.....*..........
        // addi x24, x24, 256      // .........~......'.........*......
        // addi x26, x26, 256      // .......~........'.......*........
        // mulh x20, x20, x14      // ...........~....'...........*....
        // mulh x22, x22, x14      // ......~.........'......*.........
        // mulh x24, x24, x14      // ..........~.....'..........*.....
        // mulh x26, x26, x14      // ........~.......'........*.......
        // sw x20, 0*4(x10)        // ...............~'...............*
        // sw x22, 1*4(x10)        // .............~..'.............*..
        // sw x24, 2*4(x10)        // ..............~.'..............*.
        // sw x26, 3*4(x10)        // ............~...'............*...
        // addi x11, x11, 4*4      // ................*................
        // addi x12, x12, 4*4      // ..............e.'..............~.

        addi a0, a0, 16
        bne a0, gp, poly_basemul_8l_rv64im_looper
                                  // Instructions:    23
                                  // Expected cycles: 17
                                  // Expected IPC:    1.35
                                  //
                                  // Cycle bound:     17.0
                                  // IPC bound:       1.35
                                  //
                                  // Wall time:     0.16s
                                  // User time:     0.16s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        mul x25, x30, x15         // *.............................
        lw x19, 0*4(x11)          // *.............................
        addi x11, x11, 4*4        // .*............................
        mul x31, x13, x15         // .*............................
        mul x19, x19, x4          // ..*...........................
        mul x4, x22, x15          // ..*...........................
        srai x25, x25, 32         // ....*.........................
        srai x31, x31, 32         // .....*........................
        addi x25, x25, 256        // .....*........................
        mul x19, x19, x15         // ......*.......................
        srai x4, x4, 32           // ......*.......................
        addi x31, x31, 256        // .......*......................
        mulh x25, x25, x14        // ........*.....................
        addi x4, x4, 256          // ........*.....................
        mulh x31, x31, x14        // .........*....................
        srai x19, x19, 32         // ..........*...................
        mulh x4, x4, x14          // ...........*..................
        addi x19, x19, 256        // ...........*..................
        sw x25, 1*4(x10)          // ............*................. // @slothy:core
        mulh x25, x19, x14        // ............*.................
        sw x31, 3*4(x10)          // .............*................ // @slothy:core
        sw x4, 2*4(x10)           // ...............*.............. // @slothy:core
        sw x25, 0*4(x10)          // ................*............. // @slothy:core

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // lw x26, 0*4(x11)        // *..............................
        // addi x11, x11, 4*4      // .*.............................
        // mul x27, x30, x15       // *..............................
        // mul x18, x26, x4        // ..*............................
        // mul x8, x13, x15        // .*.............................
        // mul x1, x22, x15        // ..*............................
        // srai x28, x27, 32       // ....*..........................
        // mul x21, x18, x15       // ......*........................
        // addi x28, x28, 256      // .....*.........................
        // srai x8, x8, 32         // .....*.........................
        // mulh x24, x28, x14      // ........*......................
        // addi x22, x8, 256       // .......*.......................
        // srai x1, x1, 32         // ......*........................
        // mulh x5, x22, x14       // .........*.....................
        // srai x21, x21, 32       // ..........*....................
        // addi x16, x1, 256       // ........*......................
        // mulh x8, x16, x14       // ...........*...................
        // addi x21, x21, 256      // ...........*...................
        // mulh x21, x21, x14      // ............*..................
        // sw x5, 3*4(x10)         // .............*.................
        // sw x24, 1*4(x10)        // ............*..................
        // sw x8, 2*4(x10)         // ...............*...............
        // sw x21, 0*4(x10)        // ................*..............

    restore_regs
    addi sp, sp, 8*15
    ret