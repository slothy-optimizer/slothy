.macro save_regs
  sd s0,  0*8(sp)
  sd s1,  1*8(sp)
  sd s2,  2*8(sp)
  sd s3,  3*8(sp)
  sd s4,  4*8(sp)
  sd s5,  5*8(sp)
  sd s6,  6*8(sp)
  sd s7,  7*8(sp)
  sd s8,  8*8(sp)
  sd s9,  9*8(sp)
  sd s10, 10*8(sp)
  sd s11, 11*8(sp)
  sd gp,  12*8(sp)
  sd tp,  13*8(sp)
  sd ra,  14*8(sp)
.endm

.macro restore_regs
  ld s0,  0*8(sp)
  ld s1,  1*8(sp)
  ld s2,  2*8(sp)
  ld s3,  3*8(sp)
  ld s4,  4*8(sp)
  ld s5,  5*8(sp)
  ld s6,  6*8(sp)
  ld s7,  7*8(sp)
  ld s8,  8*8(sp)
  ld s9,  9*8(sp)
  ld s10, 10*8(sp)
  ld s11, 11*8(sp)
  ld gp,  12*8(sp)
  ld tp,  13*8(sp)
  ld ra,  14*8(sp)
.endm

# void poly_basemul_8l_init_rv64im(int64_t r[256], const int32_t a[256], const int32_t b[256])
.globl poly_basemul_8l_init_rv64im
.align 2
poly_basemul_8l_init_rv64im:
    addi sp, sp, -8*15
    save_regs
    // loop control
    li gp, 32*8*8
    add gp, gp, a0
                // Instructions:    0
                // Expected cycles: 0
                // Expected IPC:    0.00
                //
                // Wall time:     0.01s
                // User time:     0.01s
                //
poly_basemul_8l_init_rv64im_looper:
                                  // Instructions:    34
                                  // Expected cycles: 24
                                  // Expected IPC:    1.42
                                  //
                                  // Cycle bound:     17.0
                                  // IPC bound:       2.00
                                  //
                                  // Wall time:     7.58s
                                  // User time:     7.58s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        lw x13, 7*4(x12)          // *.............................
        lw x25, 4*4(x11)          // .*............................
        lw x22, 4*4(x12)          // ..*...........................
        lw x1, 5*4(x11)           // ...*..........................
        lw x9, 5*4(x12)           // ....*.........................
        lw x28, 2*4(x11)          // .....*........................
        mul x17, x1, x9           // ......*.......................
        lw x9, 1*4(x11)           // ......*.......................
        lw x6, 2*4(x12)           // .......*......................
        lw x29, 0*4(x12)          // ........*.....................
        mul x1, x28, x6           // .........*....................
        lw x28, 0*4(x11)          // .........*....................
        mul x30, x25, x22         // ..........*...................
        lw x21, 6*4(x11)          // ..........*...................
        mul x22, x28, x29         // ...........*..................
        lw x14, 6*4(x12)          // ...........*..................
        lw x28, 1*4(x12)          // ............*.................
        lw x25, 3*4(x12)          // .............*................
        addi x12, x12, 4*8        // .............*................
        lw x20, 7*4(x11)          // ..............*...............
        mul x24, x21, x14         // ..............*...............
        sd x1, 2*8(x10)           // ...............*..............
        mul x23, x20, x13         // ................*.............
        lw x19, 3*4(x11)          // ................*.............
        sd x22, 0*8(x10)          // .................*............
        mul x21, x19, x25         // ..................*...........
        sd x30, 4*8(x10)          // ..................*...........
        mul x20, x9, x28          // ...................*..........
        sd x17, 5*8(x10)          // ...................*..........
        sd x24, 6*8(x10)          // ....................*.........
        sd x23, 7*8(x10)          // .....................*........
        sd x21, 3*8(x10)          // ......................*.......
        sd x20, 1*8(x10)          // .......................*......
        addi x11, x11, 4*8        // .......................*......

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // lw x5, 0*4(x11)         // .........*..............'......
        // lw x8, 0*4(x12)         // ........*...............'......
        // lw x6, 1*4(x11)         // ......*.................'......
        // lw x9, 1*4(x12)         // ............*...........'......
        // lw x7, 2*4(x11)         // .....*..................'....~.
        // lw x18, 2*4(x12)        // .......*................'......
        // lw x28, 3*4(x11)        // ................*.......'......
        // lw x19, 3*4(x12)        // .............*..........'......
        // mul x24, x5, x8         // ...........*............'......
        // mul x26, x6, x9         // ...................*....'......
        // mul x13, x7, x18        // .........*..............'......
        // mul x15, x28, x19       // ..................*.....'......
        // sd x24, 0*8(x10)        // .................*......'......
        // sd x26, 1*8(x10)        // .......................*'......
        // sd x13, 2*8(x10)        // ...............*........'......
        // sd x15, 3*8(x10)        // ......................*.'......
        // lw x29, 4*4(x11)        // .*......................'~.....
        // lw x20, 4*4(x12)        // ..*.....................'.~....
        // lw x30, 5*4(x11)        // ...*....................'..~...
        // lw x21, 5*4(x12)        // ....*...................'...~..
        // lw x31, 6*4(x11)        // ..........*.............'......
        // lw x22, 6*4(x12)        // ...........*............'......
        // lw x4, 7*4(x11)         // ..............*.........'......
        // lw x23, 7*4(x12)        // *.......................~......
        // mul x24, x29, x20       // ..........*.............'......
        // mul x26, x30, x21       // ......*.................'......
        // mul x13, x31, x22       // ..............*.........'......
        // mul x15, x4, x23        // ................*.......'......
        // sd x24, 4*8(x10)        // ..................*.....'......
        // sd x26, 5*8(x10)        // ...................*....'......
        // sd x13, 6*8(x10)        // ....................*...'......
        // sd x15, 7*8(x10)        // .....................*..'......
        // addi x11, x11, 4*8      // .......................*'......
        // addi x12, x12, 4*8      // .............*..........'......

        addi gp, gp, 64
        bne gp, a0, poly_basemul_8l_init_rv64im_looper
                // Instructions:    0
                // Expected cycles: 0
                // Expected IPC:    0.00
                //
                // Wall time:     0.01s
                // User time:     0.01s
                //
    restore_regs
    addi sp, sp, 8*15
    ret
