.equ q,    8380417
.equ q32,  0x7fe00100000000               // q << 32
.equ qinv, 0x180a406003802001             // q^-1 mod 2^64
.equ plantconst, 0x200801c0602            // (((-2**64) % q) * qinv) % (2**64)
.equ plantconst2, 0xb7b9f10ccf939804      // (((-2**64) % q) * ((-2**64) % q) * qinv) % (2**64)

# void poly_reduce_rv64im(int32_t in[256]);
.globl poly_reduce_rv64im_opt_c908
.align 2
poly_reduce_rv64im_opt_c908:
    li a1, 4194304  # 1<<22
    li a2, q
    addi a3, a0, 64*4*4
                                 // Instructions:    4
                                 // Expected cycles: 4
                                 // Expected IPC:    1.00
                                 //
                                 // Cycle bound:     4.0
                                 // IPC bound:       1.00
                                 //
                                 // Wall time:     0.02s
                                 // User time:     0.02s
                                 //
                                 // ----- cycle (expected) ------>
                                 // 0                        25
                                 // |------------------------|----
        lw x22, 2*4(x10)         // *.............................
        lw x14, 3*4(x10)         // .*............................
        add x18, x22, x11        // ..*...........................
        srai x5, x18, 23         // ...*..........................

                                  // ------ cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|-----
        // lw x22, 2*4(x10)       // *..............................
        // add x29, x22, x11      // ..*............................
        // lw x14, 3*4(x10)       // .*.............................
        // srai x5, x29, 23       // ...*...........................

        addi a3, a3, 16
poly_reduce_rv64im_loop:
                                 // Instructions:    24
                                 // Expected cycles: 12
                                 // Expected IPC:    2.00
                                 //
                                 // Cycle bound:     16.0
                                 // IPC bound:       1.50
                                 //
                                 // Wall time:     2.80s
                                 // User time:     2.80s
                                 //
                                 // ----- cycle (expected) ------>
                                 // 0                        25
                                 // |------------------------|----
        lw x19, 0*4(x10)         // *.............................
        add x4, x14, x11         // *.............................
        mul x1, x5, x12          // .*............................
        lw x21, 1*4(x10)         // .*............................
        add x8, x19, x11         // ..*...........................
        srai x4, x4, 23          // ..*...........................
        mul x4, x4, x12          // ...*..........................
        add x6, x21, x11         // ...*..........................
        srai x27, x6, 23         // ....*.........................
        srai x29, x8, 23         // ....*.........................
        sub x5, x22, x1          // .....*........................
        mul x6, x27, x12         // .....*........................
        lw x22, 2*4(x10)         // ......e.......................
        mul x23, x29, x12        // ......*.......................
        sw x5, 2*4(x10)          // .......*......................
        sub x5, x14, x4          // .......*......................
        add x29, x22, x11        // ........e.....................
        lw x14, 3*4(x10)         // ........e.....................
        sw x5, 3*4(x10)          // .........*....................
        sub x8, x21, x6          // .........*....................
        sw x8, 1*4(x10)          // ..........*...................
        sub x8, x19, x23         // ..........*...................
        srai x5, x29, 23         // ...........e..................
        sw x8, 0*4(x10)          // ...........*..................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // lw x14, 0*4(x10)        // ......*...........~............
        // lw x15, 1*4(x10)        // ......'*..........'~...........
        // lw x16, 2*4(x10)        // e.....'.....~.....'.....~......
        // lw x17, 3*4(x10)        // ..e...'.......~...'.......~....
        // add  x5, x14, x11       // ......'.*.........'.~..........
        // add  x6, x15, x11       // ......'..*........'..~.........
        // add  x7, x16, x11       // ..e...'.......~...'.......~....
        // add  x28, x17, x11      // ......*...........~............
        // srai x5, x5, 23         // ......'...*.......'...~........
        // srai x6, x6, 23         // ......'...*.......'...~........
        // srai x7, x7, 23         // .....e'..........~'..........~.
        // srai x28, x28, 23       // ......'.*.........'.~..........
        // mul  x5, x5, x12        // ~.....'.....*.....'.....~......
        // mul  x6, x6, x12        // ......'....*......'....~.......
        // mul  x7, x7, x12        // ......'*..........'~...........
        // mul  x28, x28, x12      // ......'..*........'..~.........
        // sub  x14, x14, x5       // ....~.'.........*.'.........~..
        // sub  x15, x15, x6       // ...~..'........*..'........~...
        // sub  x16, x16, x7       // ......'....*......'....~.......
        // sub  x17, x17, x28      // .~....'......*....'......~.....
        // sw x14, 0*4(x10)        // .....~'..........*'..........~.
        // sw x15, 1*4(x10)        // ....~.'.........*.'.........~..
        // sw x16, 2*4(x10)        // .~....'......*....'......~.....
        // sw x17, 3*4(x10)        // ...~..'........*..'........~...

        addi a3, a3, 16
        bne a3, a0, poly_reduce_rv64im_loop
                                 // Instructions:    20
                                 // Expected cycles: 12
                                 // Expected IPC:    1.67
                                 //
                                 // Cycle bound:     12.0
                                 // IPC bound:       1.67
                                 //
                                 // Wall time:     0.17s
                                 // User time:     0.17s
                                 //
                                 // ----- cycle (expected) ------>
                                 // 0                        25
                                 // |------------------------|----
        mul x21, x5, x12         // *.............................
        lw x8, 0*4(x10)          // *.............................
        add x6, x14, x11         // .*............................
        lw x29, 1*4(x10)         // .*............................
        srai x6, x6, 23          // ..*...........................
        add x4, x8, x11          // ..*...........................
        mul x6, x6, x12          // ...*..........................
        add x1, x29, x11         // ...*..........................
        sub x21, x22, x21        // ....*.........................
        srai x22, x4, 23         // ....*.........................
        srai x4, x1, 23          // .....*........................
        mul x22, x22, x12        // .....*........................
        sw x21, 2*4(x10)         // ......*.......................
        mul x21, x4, x12         // ......*.......................
        sub x14, x14, x6         // .......*......................
        sw x14, 3*4(x10)         // ........*.....................
        sub x22, x8, x22         // .........*....................
        sub x21, x29, x21        // ..........*...................
        sw x22, 0*4(x10)         // ..........*...................
        sw x21, 1*4(x10)         // ...........*..................

                                  // ------ cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|-----
        // lw x19, 0*4(x10)       // *..............................
        // add x4, x14, x11       // .*.............................
        // mul x1, x5, x12        // *..............................
        // lw x21, 1*4(x10)       // .*.............................
        // add x8, x19, x11       // ..*............................
        // srai x4, x4, 23        // ..*............................
        // mul x4, x4, x12        // ...*...........................
        // add x6, x21, x11       // ...*...........................
        // srai x27, x6, 23       // .....*.........................
        // srai x29, x8, 23       // ....*..........................
        // sub x5, x22, x1        // ....*..........................
        // mul x6, x27, x12       // ......*........................
        // mul x23, x29, x12      // .....*.........................
        // sw x5, 2*4(x10)        // ......*........................
        // sub x5, x14, x4        // .......*.......................
        // sw x5, 3*4(x10)        // ........*......................
        // sub x8, x21, x6        // ..........*....................
        // sw x8, 1*4(x10)        // ...........*...................
        // sub x8, x19, x23       // .........*.....................
        // sw x8, 0*4(x10)        // ..........*....................

    ret