.equ q,    8380417
.equ q32,  0x7fe00100000000               // q << 32
.equ qinv, 0x180a406003802001             // q^-1 mod 2^64
.equ plantconst, 0x200801c0602            // (((-2**64) % q) * qinv) % (2**64)
.equ plantconst2, 0xb7b9f10ccf939804      // (((-2**64) % q) * ((-2**64) % q) * qinv) % (2**64)

# void poly_reduce_rv64im(int32_t in[256]);
.globl poly_reduce_rv64im_dual_opt_c908
.align 2
poly_reduce_rv64im_dual_opt_c908:
    li a1, 4194304  # 1<<22
    li a2, q
    addi a3, a0, 64*4*4
                                 // Instructions:    4
                                 // Expected cycles: 4
                                 // Expected IPC:    1.00
                                 //
                                 // Cycle bound:     4.0
                                 // IPC bound:       1.00
                                 //
                                 // Wall time:     0.02s
                                 // User time:     0.02s
                                 //
                                 // ----- cycle (expected) ------>
                                 // 0                        25
                                 // |------------------------|----
        lw x29, 3*4(x10)         // *.............................
        lw x25, 2*4(x10)         // .*............................
        add x31, x29, x11        // ..*...........................
        srai x8, x31, 23         // ...*..........................

                                  // ------ cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|-----
        // lw x29, 3*4(x10)       // *..............................
        // lw x25, 2*4(x10)       // .*.............................
        // add x23, x29, x11      // ..*............................
        // srai x8, x23, 23       // ...*...........................

        addi a3, a3, -16
poly_reduce_rv64im_loop:
                                 // Instructions:    24
                                 // Expected cycles: 12
                                 // Expected IPC:    2.00
                                 //
                                 // Cycle bound:     16.0
                                 // IPC bound:       1.50
                                 //
                                 // Wall time:     2.74s
                                 // User time:     2.74s
                                 //
                                 // ----- cycle (expected) ------>
                                 // 0                        25
                                 // |------------------------|----
        lw x16, 0*4(x10)         // *.............................
        mul x20, x8, x12         // *.............................
        lw x19, 1*4(x10)         // .*............................
        add x1, x25, x11         // .*............................
        add x8, x16, x11         // ..*...........................
        srai x21, x1, 23         // ..*...........................
        mul x21, x21, x12        // ...*..........................
        add x1, x19, x11         // ...*..........................
        sub x7, x29, x20         // ....*.........................
        srai x1, x1, 23          // ....*.........................
        mul x28, x1, x12         // .....*........................
        srai x29, x8, 23         // .....*........................
        mul x5, x29, x12         // ......*.......................
        lw x29, 3*4(x10)         // ......e.......................
        sub x9, x25, x21         // .......*......................
        lw x25, 2*4(x10)         // .......e......................
        sw x7, 3*4(x10)          // ........*.....................
        add x23, x29, x11        // ........e.....................
        sw x9, 2*4(x10)          // .........*....................
        sub x30, x19, x28        // .........*....................
        sw x30, 1*4(x10)         // ..........*...................
        sub x15, x16, x5         // ..........*...................
        srai x8, x23, 23         // ...........e..................
        sw x15, 0*4(x10)         // ...........*..................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // lw x14, 0*4(x10)        // ......*...........~............
        // lw x15, 1*4(x10)        // ......'*..........'~...........
        // lw x16, 2*4(x10)        // .e....'......~....'......~.....
        // lw x17, 3*4(x10)        // e.....'.....~.....'.....~......
        // add  x5, x14, x11       // ......'.*.........'.~..........
        // add  x6, x15, x11       // ......'..*........'..~.........
        // add  x7, x16, x11       // ......'*..........'~...........
        // add  x28, x17, x11      // ..e...'.......~...'.......~....
        // srai x5, x5, 23         // ......'....*......'....~.......
        // srai x6, x6, 23         // ......'...*.......'...~........
        // srai x7, x7, 23         // ......'.*.........'.~..........
        // srai x28, x28, 23       // .....e'..........~'..........~.
        // mul  x5, x5, x12        // ~.....'.....*.....'.....~......
        // mul  x6, x6, x12        // ......'....*......'....~.......
        // mul  x7, x7, x12        // ......'..*........'..~.........
        // mul  x28, x28, x12      // ......*...........~............
        // sub  x14, x14, x5       // ....~.'.........*.'.........~..
        // sub  x15, x15, x6       // ...~..'........*..'........~...
        // sub  x16, x16, x7       // .~....'......*....'......~.....
        // sub  x17, x17, x28      // ......'...*.......'...~........
        // sw x14, 0*4(x10)        // .....~'..........*'..........~.
        // sw x15, 1*4(x10)        // ....~.'.........*.'.........~..
        // sw x16, 2*4(x10)        // ...~..'........*..'........~...
        // sw x17, 3*4(x10)        // ..~...'.......*...'.......~....

        addi a0, a0, 16
        bne a0, a3, poly_reduce_rv64im_loop
                                 // Instructions:    20
                                 // Expected cycles: 12
                                 // Expected IPC:    1.67
                                 //
                                 // Cycle bound:     12.0
                                 // IPC bound:       1.67
                                 //
                                 // Wall time:     0.17s
                                 // User time:     0.17s
                                 //
                                 // ----- cycle (expected) ------>
                                 // 0                        25
                                 // |------------------------|----
        mul x19, x8, x12         // *.............................
        lw x8, 0*4(x10)          // *.............................
        add x1, x25, x11         // .*............................
        lw x23, 1*4(x10)         // .*............................
        srai x1, x1, 23          // ..*...........................
        add x15, x8, x11         // ..*...........................
        mul x1, x1, x12          // ...*..........................
        add x5, x23, x11         // ...*..........................
        sub x19, x29, x19        // ....*.........................
        srai x29, x15, 23        // ....*.........................
        srai x15, x5, 23         // .....*........................
        mul x29, x29, x12        // .....*........................
        sw x19, 3*4(x10)         // ......*.......................
        mul x19, x15, x12        // ......*.......................
        sub x25, x25, x1         // .......*......................
        sw x25, 2*4(x10)         // ........*.....................
        sub x25, x8, x29         // .........*....................
        sub x19, x23, x19        // ..........*...................
        sw x25, 0*4(x10)         // ..........*...................
        sw x19, 1*4(x10)         // ...........*..................

                                  // ------ cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|-----
        // lw x16, 0*4(x10)       // *..............................
        // mul x20, x8, x12       // *..............................
        // lw x19, 1*4(x10)       // .*.............................
        // add x1, x25, x11       // .*.............................
        // add x8, x16, x11       // ..*............................
        // srai x21, x1, 23       // ..*............................
        // mul x21, x21, x12      // ...*...........................
        // add x1, x19, x11       // ...*...........................
        // sub x7, x29, x20       // ....*..........................
        // srai x1, x1, 23        // .....*.........................
        // mul x28, x1, x12       // ......*........................
        // srai x29, x8, 23       // ....*..........................
        // mul x5, x29, x12       // .....*.........................
        // sub x9, x25, x21       // .......*.......................
        // sw x7, 3*4(x10)        // ......*........................
        // sw x9, 2*4(x10)        // ........*......................
        // sub x30, x19, x28      // ..........*....................
        // sw x30, 1*4(x10)       // ...........*...................
        // sub x15, x16, x5       // .........*.....................
        // sw x15, 0*4(x10)       // ..........*....................

    ret