# This configuration was used to generate the most recent optimized code for
# the keccak_f1600_x1_scalar_no_symbolic example.

class neon_keccak_x1_no_symbolic(OptimizationRunner):
    def __init__(self, var="", arch=AArch64_Neon, target=Target_CortexA55):
        name = "keccak_f1600_x1_scalar_slothy_no_symbolic"
        infile = "keccak_f1600_x1_scalar_slothy"
        outfile = "examples/naive/aarch64/keccak/keccak_f1600_x1_scalar_no_symbolic.s"
        super().__init__(
            infile,
            name,
            outfile=outfile,
            rename=True,
            arch=arch,
            target=target,
            outfile_full=True,
            subfolder=SUBFOLDER,
        )

    def core(self, slothy):
        slothy.config.reserved_regs = ["x18", "sp"]

        slothy.config.inputs_are_outputs = True
        slothy.config.variable_size = True
        slothy.config.visualize_expected_performance = False
        slothy.config.timeout = 10800

        slothy.config.selfcheck_failure_logfile = "selfcheck_fail.log"

        slothy.config.outputs = ["flags"]
        slothy.config.constraints.stalls_first_attempt = 64
        slothy.config.constraints.minimize_spills = True
        slothy.config.constraints.allow_reordering = True
        slothy.config.constraints.allow_spills = True
        # NOTE:
        # There are better solutions to this (the true minimum seems to be 1),
        # but they take a long time to find.
        slothy.config.objective_lower_bound = 6
        slothy.config.visualize_expected_performance = True
        slothy.optimize(start="loop", end="end_loop")

        slothy.config.outputs = ["hint_STACK_OFFSET_COUNT"]
        slothy.optimize(start="initial_round_start", end="initial_round_end")

